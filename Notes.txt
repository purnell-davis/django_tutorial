django
    free open source web application framework

how can a server serve a webpage?
    requests
    ports

django - urlresolver

Create django dir structure:
django-admin startproject mysite .

change settings

set host:
ALLOWED_HOSTS

setup the db:
python manage.py migrate

start the webserver:
python manage.py runserver

set up app directory:
python manage.py startapp blog

add installed app:
INSTALLED_APPS

Create model in APP/models.py

add model to DB:
# generate model migration file
python manage.py makemigrations blog
# apply models to DB
python manage.py migrate blog

create superuser
python manage.py createsuperuser

Django works using the "WSGI protocol", a standard for serving websites using Python

urls.py
    route traffic to correct function (view)
    like nginx syntax

views.py

templates
    app/templates/app/template.html

QuerySet is, in essence, a list of objects of a given Model
QuerySets allow you to read the data from the database, filter it and order it.

Django interactive console
$ python manage.py shell

>>> from django.contrib.auth.models import User
see all users
>>> User.objects.all()
assign user
>>> me = User.objects.get(username='ola')

>>> from blog.models import Post
see all posts
>>> Post.objects.all()
create post
>>> Post.objects.create(author=me, title='Sample title', text='Test')
get post on title
>>> post = Post.objects.get(title="Sample title")
publish post
>>> post.publish()

filter
on user
>>> Post.objects.filter(author=me)
on title
>>> Post.objects.filter(title__contains='title')
on time
>>> from django.utils import timezone
>>> Post.objects.filter(published_date__lte=timezone.now())
on publish date
>>> Post.objects.filter(published_date__lte=timezone.now())

ordering
>>> Post.objects.order_by('created_date')
reverse order
>>> Post.objects.order_by('-created_date')

chaining
>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')

pass render data to render and html template
render()

bootstrap

pk is short for primary key, which is a unique name for each record in a database.
Because we didn't specify a primary key in our Post model, Django creates one for us 
(by default, a number that increases by one for each record, i.e. 1, 2, 3) and 
adds it as a field named pk to each of our posts. We access the primary key by writing post.pk, 
the same way we access other fields (title, author, etc.) in our Post object

Post.objects.get(pk=pk)
# get post object, or return 404 error page
from django.shortcuts import render, get_object_or_404
post = get_object_or_404(Post, pk=pk)

ModelForm which will save the result of the form to the model
Next, we have class Meta, where we tell Django which model should be used to create this form (model = Post).

POST
csrf_token

Logic flow with request.method == "POST"
form.isvalid()
form.save(commit=False) # allows us to get the form and modify the data before actually saving it
form.save()

post.pk

user.is_authenticated
